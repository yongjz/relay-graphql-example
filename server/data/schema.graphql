schema {
  query: Query
  mutation: Mutation
}

input CheckHidingSpotForTreasureInput {
  id: ID!
  clientMutationId: String!
}

type CheckHidingSpotForTreasurePayload {
  hidingSpot: HidingSpot
  game: Game
  clientMutationId: String!
}

type Game implements Node {
  id: ID!
  hidingSpots(after: String, first: Int, before: String, last: Int): HidingSpotConnection
  turnsRemaining: Int
}

type HidingSpot implements Node {
  id: ID!
  hasBeenChecked: Boolean
  hasTreasure: Boolean
  testField: Int
}

type HidingSpotConnection {
  pageInfo: PageInfo!
  edges: [HidingSpotEdge]
}

type HidingSpotEdge {
  node: HidingSpot
  cursor: String!
}

input LoginInput {
  username: String!
  password: String!
  id: String!
  clientMutationId: String!
}

type LoginPayload {
  user: User
  clientMutationId: String!
}

input LogoutInput {
  username: String!
  id: ID!
  clientMutationId: String!
}

type LogoutPayload {
  user: User
  clientMutationId: String!
}

type Mutation {
  checkHidingSpotForTreasure(input: CheckHidingSpotForTreasureInput!): CheckHidingSpotForTreasurePayload
  loginMutation(input: LoginInput!): LoginPayload
  signupMutation(input: SignupInput!): SignupPayload
  logoutMutation(input: LogoutInput!): LogoutPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  game: Game
  user: User
  store: Store
}

input SignupInput {
  username: String!
  mail: String!
  password: String!
  id: ID!
  clientMutationId: String!
}

type SignupPayload {
  user: User
  clientMutationId: String!
}

type Store {
  teas: [Tea]
}

type Tea {
  tes_id: Int
  name: String
  steepingTime: Int
}

type User {
  id: ID!
  userID: String
  username: String
  mail: String
}
